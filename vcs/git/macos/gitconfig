# set your user tokens as environment variables, such as ~/.secrets
# See the README for examples.
[user]
    name = Andrew Bell
    email = andrew@fr1v.org
[github]
    user = ajb3ll
    token = token
[filter "lfs"]
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
[i18n]
    fileEncoding=utf-8
[color]
    ui = auto
[color "branch"]
    current = yellow bold
    local = green bold
    remote = cyan bold
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = green bold
    changed = yellow bold
    untracked = red bold
[alias]
    a = add --all
    ai = add -i
    #############
    ap = apply
    as = apply --stat
    ac = apply --check
    #############
    ama = am --abort
    amr = am --resolved
    ams = am --skip
    #############
    b = branch
    ba = branch -a
    bd = branch -d
    br = branch -r
    #############
    c = commit
    ca = commit -a
    cm = commit -m
    cem = commit --allow-empty -m
    cam = commit -am
    cd = commit --amend
    cad = commit -a --amend
    ced = commit --allow-empty --amend
    #############
    d = diff
    dc = diff --cached
    dl = difftool
    dlc = difftool --cached
    dk = diff --check
    dp = diff --patience
    dck = diff --cached --check
    #############
    f = fetch
    fo = fetch origin
    fu = fetch upstream
    #############
    fp = format-patch
    #############
    fk = fsck
    #############
    g = grep -p
    #############
    l = log --oneline
    lg = log --oneline --graph --decorate
    #############
    ls = ls-files
    lsf = "!git ls-files | grep -i"
    #############
    m = merge
    ma = merge --abort
    mc = merge --continue
    ms = merge --skip
    #############
    o = checkout
    ob = checkout -b
    #############
    pr = prune -v
    #############
    ps = push
    psf = push -f
    psu = push -u
    pso = push origin
    psao = push --all origin
    psfo = push -f origin
    psuo = push -u origin
    psom = push origin master
    psfom = push -f origin master
    psuom = push -u origin master
    #############
    pl = pull
    plu = pull -u
    plo = pull origin
    plp = pull upstream
    plom = pull origin master
    plpm = pull upstream master
    #############
    pb = pull --rebase
    pbo = pull --rebase origin
    pbp = pull --rebase upstream
    pbom = pull --rebase origin master
    pbpm = pull --rebase upstream master
    #############
    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbi = rebase --interactive
    rbs = rebase --skip
    #############
    re = reset
    rh = reset HEAD
    reh = reset --hard
    rem = reset --mixed
    res = reset --soft
    rehh = reset --hard HEAD
    remh = reset --mixed HEAD
    resh = reset --soft HEAD
    #############
    r = remote
    ra = remote add
    rr = remote rm
    rv = remote -v
    rm = remote rename
    rp = remote prune
    rs = remote show
    rao = remote add origin
    rau = remote add upstream
    rso = remote show origin
    rsu = remote show upstream
    rpo = remote prune origin
    rpu = remote prune upstream
    #############
    s = status
    sb = status -s -b
    #############
    sa = stash apply
    sc = stash clear
    sd = stash drop
    sl = stash list
    sp = stash pop
    ss = stash save
    sw = stash show
    #############
    w = show
    wp = show -p
    wr = show -p --no-color
    #############
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit
    #############
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    unassumeall = !git assumed | xargs git update-index --no-assume-unchanged
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
    #############
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
    #############
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    #############
    barebranch = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
    flat = clone --depth 1
    subpull = !git submodule foreach git pull --tags origin master
    subrepo = !sh -c 'filter-branch --prune-empty --subdirectory-filter $1 master' -
    human = name-rev --name-only --refs=refs/heads/*
    serve = !git daemon --reuseaddr --verbose    --base-path=. --export-all ./.git
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
[format]
    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[apply]
    whitespace = nowarn
[branch]
    autosetuprebase = always
    autosetupmerge = true
[url "ssh@github.com:ajb3ll/"]
    pushInsteadOf = "https://github.com:ajb3ll/"
[rebase]
    autosquash = true
[push]
    # 'git push' will push the current branch to its tracking branch
    # the usual default is to push all branches
    default = matching
[help]
    autocorrect = 1
[core]
    autocrlf = false
    editor = subl -n -w
    visual = subl -n -w
    bare = false
    logAllRefUpdates = true
    trustctime = false
    filemode = false
    excludesfile = ~/.gitignore
[init]
    templatedir = ~/.git/templates
[fetch]
    prune = true
[http]
    sslVerify
[advice]
    statusHints = true
[commit]
    template = ~/.git/templates/git_commit_template
[credential]
	canFallBackToInsecureStore = true
[merge "mergepbx"]
        name = XCode project files merger
        driver = mergepbx %O %A %B
[mergetool]
	keepBackup = true
